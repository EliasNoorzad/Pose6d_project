import torch
import numpy as np
from torch.utils.data import Dataset
from pathlib import Path
import cv2, yaml

class CustomDataset(Dataset):
    def __init__(self, targ_dir, split_txt, transform=None):
        """
        targ_dir: مسیر فولدرِ یک شیء (01، 02، …)
        split_txt: مسیر train.txt یا test.txt
        transform: تبدیلاتی که روی RGB اعمال شوند (دلخواه)
        """
        self.targ_dir = Path(targ_dir)
        self.transform = transform

        # لیست آی‌دی‌ها
        with open(split_txt, "r") as f:
            self.split_ids = [line.strip() for line in f]

        # بارگذاری ground truth و info
        with open(self.targ_dir / "gt.yml", "r") as f:
            self.gt_all = yaml.safe_load(f)
        with open(self.targ_dir / "info.yml", "r") as f:
            self.info = yaml.safe_load(f)

    def __len__(self):
        return len(self.split_ids)

    def __getitem__(self, idx):
        name = self.split_ids[idx]

        # مسیرها
        rgb_path   = self.targ_dir/"rgb"/f"{name}.png"
        depth_path = self.targ_dir/"depth"/f"{name}.png"
        mask_path  = self.targ_dir/"mask"/f"{name}.png"

        # خواندن RGB و depth (مثل قبل) …
        rgb   = cv2.cvtColor(cv2.imread(str(rgb_path)), cv2.COLOR_BGR2RGB)
        depth = cv2.imread(str(depth_path), cv2.IMREAD_UNCHANGED)

        # **خواندن ماسک به‌صورت خاکستری (تک‌کانال)**
        mask = cv2.imread(str(mask_path), cv2.IMREAD_GRAYSCALE)
        assert mask is not None, f"Mask not found: {mask_path}"

        # تبدیل به تنسور
        rgb_tensor   = torch.from_numpy(rgb).permute(2,0,1).float() / 255.0
        depth_tensor = torch.from_numpy(depth)[None].float()
        mask_tensor  = torch.from_numpy(mask)[None].float()

        # استخراج pose مثل قبل…
        key  = int(name)
        pose = self.gt_all[key][0]
        R = np.array(pose["cam_R_m2c"], dtype=np.float32).reshape(3,3)
        t = np.array(pose["cam_t_m2c"], dtype=np.float32)
        bb= np.array(pose["obj_bb"],    dtype=np.int64)

        sample = {
            "rgb"  : rgb_tensor,
            "depth": depth_tensor,
            "mask" : mask_tensor,
            "R"    : torch.from_numpy(R),
            "t"    : torch.from_numpy(t),
            "bb"   : torch.from_numpy(bb),
        }

        if self.transform:
            sample["rgb"] = self.transform(sample["rgb"])

        return sample


##Dataloader for obj1
if __name__=="__main__":
    targ_dir = "/content/drive/MyDrive/6D-pose-Dataset/Linemod_preprocessed/data/01"
    split_txt = f"{targ_dir}/train.txt"
    ds = CustomDataset(targ_dir, split_txt)

    print(f"Total samples: {len(ds)}")
    sample = ds[0]
    for k,v in sample.items():
        if isinstance(v, torch.Tensor):
            print(f"{k:6s}: {tuple(v.shape)} dtype={v.dtype}")
        else:
            print(f"{k:6s}: {v}")
